package pemesananrestoran;

//Mengimport beberapa fungsi SQL
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;

public class Koneksi {
    //Menetapkan koneksi sebagai Connection
    private static Connection koneksi;

    //Untuk menyambungkan koneksi ke database
    public static Connection getKoneksi() throws ClassNotFoundException, SQLException {
        if (koneksi == null || koneksi.isClosed()) {
            try {
                String url = "jdbc:mysql://localhost:3306/restoran";
                String user = "root";
                String password = "";
                Class.forName("com.mysql.cj.jdbc.Driver");
                koneksi = DriverManager.getConnection(url, user, password);
                System.out.println("Berhasil Tersambung");
            } catch (SQLException e) {
                System.out.println("Error: " + e.getMessage());
                throw e;
            }
        }
        //mengembalikan hasil koneksi
        return koneksi;
    }

    //Untuk menambah kolom dengan id otomatis
    public static void insertPelanggan(String nama, int nomeja, int nopesanan) {
        try {
            // Establish a connection to the database
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();

            int hargatotal = 0;

            // Define the SQL query to insert a new row using prepared statement
            String sql = "INSERT INTO pelanggan (nama, nopesanan, nomeja, hargatotal) VALUES (?, ?, ?, ?)";

            try (java.sql.PreparedStatement preparedStatement = conn.prepareStatement(sql,
                    Statement.RETURN_GENERATED_KEYS)) {
                preparedStatement.setString(1, nama);
                preparedStatement.setInt(2, nomeja);
                preparedStatement.setInt(3, nopesanan);
                preparedStatement.setInt(4, hargatotal);

                // Execusi prepared statement
                int affectedRows = preparedStatement.executeUpdate();

                if (affectedRows > 0) {
                    // Menerima id auto-generated
                    ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        int autoGeneratedId = generatedKeys.getInt(1);
                        System.out.println("Auto-generated ID: " + autoGeneratedId);
                    } else {
                        System.out.println("Failed to retrieve auto-generated ID.");
                    }
                }
            }

            // Don't forget to close the connection when you're done.
            conn.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            // Handle connection or SQL exceptions appropriately.
        }
    }
    
    //Untuk mendapatkan ID dari tabel pelanggan
    public static int getIdPelanggan() {
        int getid = 0;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM pelanggan";
            
            //Eksekusi ResultSet
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getid = rs.getInt("id");
            }
            
            System.out.println("Berhasil mendapat id Pelanggan");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getid;
    }
    
    //Untuk mendapatkan nama dari tabel pelanggan
    public static String getNamaPelanggan() {
        String getNama = null;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM pelanggan";
            
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getNama = rs.getString("nama");
            }
            
            System.out.println("Berhasil mendapat nama Pelanggan");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getNama;
    }
    
    //Untuk mendapatkan nomeja dari tabel pelanggan
    public static int getNoMejaPelanggan() {
        int getMeja = 0;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM pelanggan";
            
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getMeja = rs.getInt("nopesanan");
            }
            
            System.out.println("Berhasil mendapat no Pesanan");
            
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getMeja;
    }
    
    //Untuk mendapatkan nopesanan dari tabel pelanggan
    public static int getNoPesananPelanggan() {
        int getPesan = 0;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM pelanggan";
            
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getPesan = rs.getInt("nopesanan");
            }
            
            System.out.println("Berhasil mendapat no Pesanan");
            
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getPesan;
    }
    
    //Untuk memperbarui nilai kolom hargatotal pada tabel pelanggan sesuai dengan input
    public static void updateHargaTotal(int hargatotal) {
    try {
        Connection conn = getKoneksi();
        Statement stmt = conn.createStatement();

        // Use ORDER BY and LIMIT to get the latest record based on ID
        String selectLatestSql = "SELECT id FROM pelanggan ORDER BY id DESC LIMIT 1";

        ResultSet resultSet = stmt.executeQuery(selectLatestSql);

        if (resultSet.next()) {
            int latestId = resultSet.getInt("id");

            // Update the latest record based on ID
            String updateSql = "UPDATE pelanggan SET hargatotal='%d' WHERE id=%d";
            updateSql = String.format(updateSql, hargatotal, latestId);

            stmt.execute(updateSql);

            System.out.println("Berhasil memperbarui harga total pelanggan");

        } else {
            System.out.println("Tidak ada record untuk diperbarui");
        }

        conn.close();
    } catch (ClassNotFoundException | SQLException e) {
        e.printStackTrace();
    }
}


    
    //Untuk mendapatkan nama dari tabel makanan
    public static String getNamaMakanan(int idmakanan) {
        String getNama = null;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM makanan WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getNama = rs.getString("nama");
            }
            
            System.out.println("Berhasil mendapat nama Makanan");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getNama;
    }
    
    //Untuk mendapatkan deskripsi dari tabel makanan
    public static String getDeskripsiMakanan(int idmakanan) {
        String getDeskripsi = null;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM makanan WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getDeskripsi = rs.getString("deskripsi");
            }
            
            System.out.println("Berhasil mendapat deskripsi Makanan");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getDeskripsi;
    }
    
    //Untuk mendapatkan harga dari tabel makanan
    public static int getHargaMakanan(int idmakanan) {
        int getHarga = 0;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM makanan WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getHarga = rs.getInt("harga");
            }
            
            System.out.println("Berhasil mendapat harga Makanan");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getHarga;
    }
    
    //Untuk mendapatkan nama dari tabel minuman
    public static String getNamaMinuman(int idmakanan) {
        String getNama = null;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM minuman WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getNama = rs.getString("nama");
            }
            
            System.out.println("Berhasil mendapat nama Minuman");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getNama;
    }
    
    //Untuk mendapatkan deskripsi dari tabel minuman
    public static String getDeskripsiMinuman(int idmakanan) {
        String getDeskripsi = null;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM minuman WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getDeskripsi = rs.getString("deskripsi");
            }
            
            System.out.println("Berhasil mendapat deskripsi Minuman");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getDeskripsi;
    }
    
    //Untuk mendapatkan harga dari tabel minuman
    public static int getHargaMinuman(int idmakanan) {
        int getHarga = 0;
        try {
            Connection conn = getKoneksi();
            Statement stmt = conn.createStatement();
            
            String sql = "SELECT * FROM minuman WHERE id='%d'";
            sql = String.format(sql, idmakanan);
            ResultSet rs = stmt.executeQuery(sql);
            
            while(rs.next()) {
                getHarga = rs.getInt("harga");
            }
            
            System.out.println("Berhasil mendapat herga Minuman");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return getHarga;
    }
    
    //Untuk menegecek apakah koneksi telah ditutup
    public static void clean() {
        try {
            if (koneksi != null && !koneksi.isClosed()) {
                koneksi.close();
                System.out.println("Connection closed");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions appropriately
        }
    }

    //Untuk mencoba apakah getKoneksi telah berhasil
    public static void main(String args[]) throws ClassNotFoundException, SQLException {
        getKoneksi();
        clean();
    }
}
